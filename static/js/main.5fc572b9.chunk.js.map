{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","react_default","a","createElement","className","App_Foto","App_Mapa","App_BotoFoto","Component","Foto","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","imatge","updateFoto","bind","assertThisInitialized","src","setState","Mapa","_this2","lat","lng","zoom","mapa","updateMapa","position","Map","center","TileLayer","attribution","url","Marker","Popup","BotoFoto","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+SAMMA,mLAEF,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAACE,EAAD,MACAJ,EAAAC,EAAAC,cAACG,EAAD,OAEFL,EAAAC,EAAAC,cAACI,EAAD,cARUC,aAcZC,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,OAAQ,qEAEVC,EAAaA,EAAWC,KAAXT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KALIA,wEAQjB,OACEV,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOmB,IAAKT,KAAKI,MAAMC,iBAX3BX,aAiBnB,SAASY,EAAWD,GAClBL,KAAKU,SAAS,CAACL,eAGXM,cACJ,SAAAA,EAAYf,GAAO,IAAAgB,EAAA,OAAAd,OAAAC,EAAA,EAAAD,CAAAE,KAAAW,IACfC,EAAAd,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAa,GAAAR,KAAAH,KAAMJ,KACDQ,MAAQ,CACXS,IAAK,GACLC,IAAK,EACLC,KAAM,EACNC,KAAM,0DAERC,EAAaA,EAAWV,KAAXT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAc,KAREA,wEAWjB,IAAMM,EAAW,CAAClB,KAAKI,MAAMS,IAAKb,KAAKI,MAAMU,KAC7C,OACE3B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAKC,OAAQF,EAAUH,KAAMf,KAAKI,MAAMW,MACtC5B,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CACEC,YAAY,GACZC,IAAKvB,KAAKI,MAAMY,OAElB7B,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CAAQN,SAAUA,GAChB/B,EAAAC,EAAAC,cAACoC,EAAA,EAAD,6BACuBtC,EAAAC,EAAAC,cAAA,WADvB,kCApBSK,aA6BnB,SAASuB,EAAWJ,EAAKC,EAAKC,EAAMC,GAClChB,KAAKU,SAAS,CAACG,MAAKC,MAAKC,OAAMC,aAG3BU,wLAEFf,EAAKD,SAAS,CACZG,IAAK,GACLC,IAAK,EACLC,KAAM,qCAIR,OACE5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,UAAQsC,QAAS,kBAOvBrB,EAAW,4FACXW,EAAW,GAAG,EAAE,EAAE,wDARZ,sBAXevB,aAsBRR,QCpFK0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5fc572b9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet';\n//import Camera from 'react-html5-camera-photo';\n//import 'react-html5-camera-photo/build/css/index.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\" >\n        <div className=\"canvases\">\n          <Foto />\n          <Mapa />\n        </div>\n        <BotoFoto />\n      </div>\n    );\n  }\n}\n\nclass Foto extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      imatge: 'https://upload.wikimedia.org/wikipedia/commons/7/7f/Nagec_cat.jpg'\n    }\n    updateFoto = updateFoto.bind(this);\n  }\n  render() {\n    return (\n      <div >\n        <img className=\"foto\" src={this.state.imatge} />\n      </div>\n    );\n  }\n}\n\nfunction updateFoto(imatge) {\n  this.setState({imatge});\n}\n\nclass Mapa extends Component {\n  constructor(props) {\n      super(props)\n      this.state = {\n        lat: 41,\n        lng: 1,\n        zoom: 7,\n        mapa: 'https://maps.wikimedia.org/osm-intl/{z}/{x}/{y}{r}.png'\n      }\n      updateMapa = updateMapa.bind(this);\n  }\n  render() {\n    const position = [this.state.lat, this.state.lng]\n    return (\n      <Map center={position} zoom={this.state.zoom}>\n        <TileLayer\n          attribution=''\n          url={this.state.mapa}\n        />\n        <Marker position={position}>\n          <Popup>\n            A pretty CSS3 popup. <br /> Easily customizable.\n          </Popup>\n        </Marker>\n      </Map>\n    )\n  }\n}\n\nfunction updateMapa(lat, lng, zoom, mapa) {\n  this.setState({lat, lng, zoom, mapa});\n}\n\nclass BotoFoto extends Component {\n  handleClick() {\n    Mapa.setState({\n      lat: 42,\n      lng: 0,\n      zoom: 8,\n    })\n  }\n  render() {\n    return (\n      <div className=\"boto\">\n        <button onClick={()=>actualitza()}>Actualitza</button>\n      </div>\n    );\n  }\n}\n\nfunction actualitza() {\n  updateFoto('http://appinventor.mit.edu/explore/sites/all/files/ai2tutorials/helloPurr/kitty.png');\n  updateMapa(42,0,5,'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png');\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}